import streamlit as st
from dotenv import load_dotenv
import markdown



import os
from blogpostcreator import BlogPostCreator
load_dotenv()

with st.sidebar:
    "## ‚úçÔ∏è Blog Post Generator"

    "### How to use"

    """
    1. Enter the number of web references you want to use. (Max 10).
    2. Enter the keyword you want to generate a blog post for.
    3. Click on the "Generate blog post" button.

    """
            
    web_references = st.number_input(
        label="Enter number of web references to use",
        max_value=10,
        min_value=1,
        value=3,
    )
    
    # openai_api_key = st.text_input(
    #     label="OpenAI API Key",
    #     type="password"
    #     )
    
    # os.environ['OPENAI_API_KEY'] = openai_api_key

    st.divider()

    """
    ### About

    ‚úçÔ∏è Blog Post Generator allows you to generate an SEO optimised blog post from keywords. 
    It uses web references from top ranking articles to generate your blog post. 
    It also allows you to specify a number of web links to use. 
    It only allows a maximum of 10.

    """

    st.divider()

    """
    ### FAQs

    #### How does it work?
    The Blog Post Generator uses web references from top ranking articles to generate your blog post.

    #### Is the information generated by the agent accurate?
    The agent generates information based on the web references provided. It is recommended to verify the information generated.

    #### How many web references can I use?
    You can use a maximum of 10 web references.

    #### How do I get an OpenAI API key?
    You can get an OpenAI API key by signing up at [OpenAI](https://platform.openai.com/account/api-keys).

    

    """

    st.divider()




    


st.title(" ‚úçÔ∏è Blog Post Generator ")


if not st.secrets['OPENAI_API_KEY']:      
    st.info("Enter your OpenAI API key in the sidebar. You can get a key at https://platform.openai.com/account/api-keys.")

with st.form(key="generate_blog_post"):
    keyword = st.text_input(label="Enter a keyword", placeholder="")
    # Here Add one more text box to accept prompt from user, which will be optional.
    userprompt = st.text_area(label="Optional: Enter a custom prompt", placeholder="Type your custom prompt here (optional)", height=150)

    submitted = st.form_submit_button("Generate blog post")
    
if submitted and not st.secrets['OPENAI_API_KEY']:
    st.info("Please enter your OpenAI API key", icon="‚ÑπÔ∏è")
        
elif submitted and not keyword:
    st.warning("Please enter a keyword", icon="‚ö†Ô∏è")
        
elif submitted:
    # Ensure the WordPress credentials are passed
    wp_url=st.secrets['WP_URL']
    wp_user=st.secrets['WP_USER']
    wp_pass=st.secrets['WP_PASS']  # Add your WordPress credentials her
    print("userprompt", userprompt)
    creator = BlogPostCreator(keyword, web_references, wp_url, wp_user, wp_pass, userprompt)  # Pass the required arguments

    links = creator.get_links()
    intialMessage = "Generating your blog post with the provided links.."
    intialMessage += ", References:" + ", ".join(f"- {link}" for link in links)

    with st.spinner(intialMessage):
        try:
            # Generate the blog post content
            response = creator.create_blog_post()
                
            if not response:
                st.warning("Warning: Could not generate the blog post.")    
            else:
                st.success("Blog post generated successfully!")
                st.write("### Generated Blog Post")
                st.write(response)
                
                # Now post the blog content to WordPress
                title = "Generated Blog Post: " + keyword  # You can customize the title
                html = markdown.markdown(response)
                creator.postwordpress(content=html, title=title)
                
                st.snow()
        except Exception as e:
            st.error("An error occurred while generating the blog post.")
            st.error(f"Details: {e}", icon="üö®")
